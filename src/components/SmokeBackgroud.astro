<div class="fixed top-0 h-full w-full -z-10" id="smoke-bkg"></div>

<script>
	import * as THREE from "three"

	const bkg = document.getElementById("smoke-bkg")
	let w = window.innerWidth
	let h = window.innerHeight

	// inicializar Three.js
	// tres cosas básicas: cámara, escena, renderizador

	// escena
	const scene = new THREE.Scene()

	// cámara
	const camera = new THREE.PerspectiveCamera(75, w / h, 1, 1000)
	camera.translateZ(10)
	scene.add(camera)
	const THEME = {
			dark: {
				background: 0x444444,
				light: 0xffffff,
				opacity: 1
			},
			light: {
				background: 0xdddddd,
				light: 0xffffff,
				opacity: 0.2
			}
		} as const
		const themePreference = window.getThemePreference()
		let currentTheme = THEME[themePreference]

	// renderer
	const renderer = new THREE.WebGLRenderer()
	renderer.setSize(w, h)
	renderer.setClearColor(currentTheme.background, 1)

	bkg?.appendChild(renderer.domElement)

	// añadir luz direccional
	const light = new THREE.DirectionalLight(currentTheme.light, 0.5)
	// posicion de la luz
	light.position.set(-1, 3, 1)
	// añadir luz
	scene.add(light)

	// helper para saber de donde viene la luz
	/* const helper = new THREE.DirectionalLightHelper(light, 5)
	scene.add(helper) */
	const smokeParticles: THREE.Mesh[] = []

	const loader = new THREE.TextureLoader()
	loader.crossOrigin = "" // -> esto puede ser necesario si se despliega

	loader.load("/smoke.webp", (texture) => {
		// crear un plano geometrico de 300x300
		const smokeGeo = new THREE.PlaneGeometry(300, 300)
		// material
		const smokeMaterial = new THREE.MeshLambertMaterial({
			map: texture,
			transparent: true,
			opacity: currentTheme.opacity
		})
		// malla
		const NUM_PARTICLES = 300
		for (let p = 0; p < NUM_PARTICLES; p++) {
			const particle = new THREE.Mesh(smokeGeo, smokeMaterial)
			// posicionar aleatoriamente
			// en la x, y, z
			particle.position.set(
				Math.random() * 500 - 250, // x de -250 a 250
				Math.random() * 500 - 250, // y de -250 a 250
				Math.random() * 1000 - 100 // z de -100 a 900
			)
			// aleatorimente la z
			particle.rotation.z = Math.random() * 360
			// añadir la particula a la escena
			scene.add(particle)
			// añadir la particula al array
			smokeParticles.push(particle)
		}
	})
	function resize() {
		w = window.innerWidth
		h = window.innerHeight
		camera.aspect = w / h
		camera.updateProjectionMatrix() // se tiene que ejecutar cada vez que se cambian los valores de la cámara
	}

	function animate() {
		requestAnimationFrame(animate)
		smokeParticles.forEach(particle => {
			particle.rotation.z += 0.005
		})
		renderer.render(scene, camera)
	}
	animate()
	window.addEventListener("resize", resize)
	window.addEventListener("theme-changed", () => {
		const themePreference = window.getThemePreference()
		currentTheme = THEME[themePreference]
		renderer.setClearColor(currentTheme.background, 1)
		light.color.set(currentTheme.light)
		smokeParticles.forEach(particle => {
			particle.material.opacity = currentTheme.opacity
		})
	})
</script>